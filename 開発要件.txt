# Shopify アプリ開発要件

## フォルダ構成
bot-protection-app-minimal_02/
├─ .env.local          # 環境変数（Shopify APIキー、Firebase設定など）
├─ .gitignore
├─ next.config.js
├─ package.json
├─ tailwind.config.js
├─ tsconfig.json
└─ src/                # アプリケーション本体
   ├─ app/             # Next.js App Router ページ & API
   │  ├─ admin/        # 管理画面UI
   │  │  ├─ add-ip/    # IP登録フォーム
   │  │  ├─ list-ip/   # IPリスト表示
   │  │  └─ logs/      # アクセスログ管理UI
   │  ├─ api/          # APIルート
   │  │  ├─ admin/     # 管理用API
   │  │  │  ├─ add-ip/ # FirestoreへIP追加
   │  │  │  └─ list-ip/# FirestoreからIP一覧取得
   │  │  └─ get-ip/    # クライアントIP取得API
   │  ├─ blocked/      # ブロック時の表示ページ
   │  ├─ auth-*        # Shopify認証関連
   │  ├─ hello/        # 動作確認ページ
   │  ├─ installed/    # インストール完了ページ
   │  ├─ layout.tsx    # 全体レイアウト
   │  └─ page.tsx      # トップページ
   │
   ├─ lib/             # ライブラリ・ユーティリティ
   │  ├─ check-ip.ts   # IP判定ロジック（blockIp/unblockIp など）
   │  └─ firebase.ts   # Firebase 初期化
   │
   ├─ components/      # 共通コンポーネント
   ├─ scripts/         # 開発用スクリプト
   ├─ tests/           # テストコード
   ├─ types/           # 型定義
   └─ middleware.ts    # Next.js Middleware（IP判定＆ブロック処理）

## 開発ルール
- App Router 構成に統一（pages/ は使わない）
- Firestore を利用する API には必ず `export const runtime = "nodejs";` を記載
- 環境変数は `.env.local` に集約し Git管理外にする
- バックアップフォルダや試作コード（proxy/, *_backup_*/）は削除済み

## Shopify App Proxy 署名検証エラー事象と解決方法

### 事象
- Shopify App Proxy 経由のリクエスト署名検証に失敗し、常に `match: false` となる状態が発生。
- Client Secret の誤設定や Shopify 側の不具合を疑ったが、実際には **canonical query の組み立て誤り** が原因。

### 原因
- 署名生成時にリクエストパラメータを `&` 区切りで結合していた。  

// ❌ 誤り
return keys.map((k) => `${k}=${obj[k]}`).join("&");

// ✅ 正しい
return keys.map((k) => `${k}=${obj[k]}`).join("\\n");

### 対応
- `buildCanonicalQuery` 関数を修正し、Shopifyサポートの指摘通り `\\n` 区切りで canonical string を生成するよう修正。  
- 修正後 `/debug-params` で `match:true` を確認。  
- デバッグ用エンドポイント（`/debug-params`, `/verify`）は確認後削除済み。

### 再発防止
- **署名検証ロジックは絶対に改変せず流用する**  
- 検証は専用の `/debug-params` を一時追加して行い、完了後は必ず削除  
- 修正箇所は必ず「どこをどう直したか」を明示して管理


## Shopify OAuth 署名検証エラー事象と解決方法

### 事象
- Shopify OAuth コールバックで HMAC 検証に失敗し、常に `Invalid HMAC` となる状態が発生。
- Client Secret の誤設定を疑ったが、実際には **URL デコード済み値を使って canonical string を生成していたこと** が原因。

### 原因
- `URLSearchParams` を利用すると、自動で decode された値になる。
- Shopify は **未 decode の raw query 値** をもとに digest を計算するため、食い違いが発生。

### 対応
- `new URL(req.url).search.slice(1)` を使って **raw query** を取得。
- `hmac` を除外し、残りをアルファベット順にソート。
- `&` 区切りで canonical string を生成。
- `crypto.createHmac("sha256", secret).update(canonical).digest("hex")` で生成した digest と比較。
- 修正後、正常にリダイレクトまで到達することを確認。

### 再発防止
- **Proxy / OAuth / Webhook で HMAC の計算方法が異なる**ため、用途別に共通関数化する。  
  - Proxy → `\n` 区切り, hex  
  - OAuth → `&` 区切り, hex, raw query 使用  
  - Webhook → body, base64  





Firebase Admin SDK 初期化ルールと再発防止策
事象
Service account object must contain a string "project_id" property.
Invalid PEM formatted message
Unterminated string in JSON
ビルドやデプロイで Firebase Admin SDK 初期化エラーが頻発した。
原因
.env.local の FIREBASE_PRIVATE_KEY の改行扱いが壊れた
JSON丸ごと方式を .env に入れたため、dotenv の解釈で失敗した
正しい対応（分割3変数方式に固定）
.env.local に必ず以下を設定する：
FIREBASE_PROJECT_ID=bot-protection-xxxx
FIREBASE_CLIENT_EMAIL=firebase-adminsdk-xxx@bot-protection-xxxx.iam.gserviceaccount.com
FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\nXXXXX...\n-----END PRIVATE KEY-----\n"
FIREBASE_PRIVATE_KEY は必ず ダブルクォートで囲む
改行は \n 文字列で表現（実際の改行を入れない）
src/lib/firebase.ts は以下に固定する：
import { initializeApp, getApps, cert } from "firebase-admin/app";
import { getFirestore } from "firebase-admin/firestore";

const firebaseApp =
  getApps().length === 0
    ? initializeApp({
        credential: cert({
          projectId: process.env.FIREBASE_PROJECT_ID,
          clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
          privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, "\n"),
        }),
      })
    : getApps()[0];

export const db = getFirestore(firebaseApp);
再発防止ルール
JSON丸ごと (FIREBASE_SERVICE_ACCOUNT_KEY={...}) 方式は禁止
Firebase Admin SDK は必ず 分割3変数方式で管理
デプロイ前に npm run build をローカルで必ず実行して確認する
このルールを README / 開発要件に明記し、全員が統一設定する
